
#include <stdio.h>

int gcdExtended(int a, int b, int *x, int *y) {
    if (a == 0) {
        *x = 0;
        *y = 1;
        return b;
    }

    int x1, y1;
    int gcd = gcdExtended(b % a, a, &x1, &y1);

    *x = y1 - (b / a) * x1;
    *y = x1;

    return gcd;
}

int modInverse(int a, int m) {
    int x, y;
    int gcd = gcdExtended(a, m, &x, &y);

    if (gcd != 1) {
        printf("Error: The multiplicative inverse does not exist.\n");
        return -1;
    }

    int result = (x % m + m) % m;

    return result;
}

int main() {
    int e = 31;
    int n = 3599;
    int p, q;

    // Find the prime factors p and q
    for (p = 2; p < n; p++) {
        if (n % p == 0) {
            q = n / p;
            break;
        }
    }

    // Calculate f(n)
    int phi = (p - 1) * (q - 1);

    // Calculate the private key
    int d = modInverse(e, phi);

    printf("Private Key (d): %d\n", d);

    return 0;
}
