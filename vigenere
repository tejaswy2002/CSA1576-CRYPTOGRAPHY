#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>

#define MAX_KEY_SIZE 100

// Function to encrypt the plaintext using the one-time pad VigenÃ¨re cipher
void encrypt(char *plaintext, int *key, char *ciphertext) {
    int i = 0;
    int keyIndex = 0;

    while (plaintext[i] != '\0') {
        if (isalpha(plaintext[i])) {
            char base = isupper(plaintext[i]) ? 'A' : 'a';
            int plaintextIndex = plaintext[i] - base;
            int keyShift = key[keyIndex] % 26;
            int ciphertextIndex = (plaintextIndex + keyShift) % 26;
            ciphertext[i] = base + ciphertextIndex;

            keyIndex = (keyIndex + 1) % MAX_KEY_SIZE;
        } else {
            ciphertext[i] = plaintext[i];
        }

        i++;
    }

    ciphertext[i] = '\0';
}

int main() {
    char plaintext[1000];
    int key[MAX_KEY_SIZE];
    char ciphertext[1000];

    printf("Enter the plaintext: ");
    fgets(plaintext, sizeof(plaintext), stdin);

    printf("Enter the key (space-separated numbers between 0 and 26): ");
    int i = 0;
    while (scanf("%d", &key[i]) == 1) {
        i++;
        if (i >= MAX_KEY_SIZE) {
            break;
        }
    }
    encrypt(plaintext, key, ciphertext);

    printf("Ciphertext: %s\n", ciphertext);

    return 0;
}
